# -*- coding: utf-8 -*-
"""Energomach.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hz9zRmPf_1eI8qLtaDMPLVfXdKcbMV2l
"""

# Посмотрим на данные через sweeetviz
#pip install sweetviz

import sweetviz as sv
import pandas as pd

av_pr_sac_2020 = pd.read_excel('Аварии_Причины_САЦ_2020.xlsx')

av_pr_sac_2020_report = sv.analyze(av_pr_sac_2020)
av_pr_sac_2020_report.show_html('av_pr_sac_2020_report.html')

av_pog_sac_2020 = pd.read_excel('Аварии_погода_САЦ_2020.xlsx')

av_pog_sac_2020['Субъект РФ'] = av_pog_sac_2020['Субъект РФ'].astype(str)

av_pog_sac_2020_report = sv.analyze(av_pog_sac_2020)
av_pog_sac_2020_report.show_html('av_pog_sac_2020_report.html')

av_pog_sac = pd.read_excel('Аварии_погода_САЦ.xlsx')

av_pog_sac_report = sv.analyze(av_pog_sac)
av_pog_sac_report.show_html('av_pog_sac_report.html')

# Работать будем только с файлом Аварии_Причины_САЦ_2020, как наиболее полным
av_pr_sac_2020

# Переименуем столбцы
av_pr_sac_2020 = av_pr_sac_2020.rename(columns={"Дата (местное время)": "date", "Субъект РФ2": "region", "Причина": "cause"})

# Удалим отключения, вызванные животными и птицами
indexNames = av_pr_sac_2020[av_pr_sac_2020['cause'] == 'Воздействие животных и птиц'].index
av_pr_sac_2020 = av_pr_sac_2020.drop(indexNames)

av_pr_sac_2020

av_pr_sac_2020.nunique()

pog_rf_2020 = pd.read_excel('!Погода РФ 2020.xls')

pog_rf_2020

pog_rf_2020.loc[:,'local_time'] = pd.to_datetime(pog_rf_2020['local_time'])

av_pr_sac_2020.loc[:,'date'] = pd.to_datetime(av_pr_sac_2020['date'])

pog_rf_2020['День года'] = pog_rf_2020['local_time'].dt.dayofyear
pog_rf_2020['Час'] = pog_rf_2020['local_time'].dt.hour

av_pr_sac_2020['День года'] = av_pr_sac_2020['date'].dt.dayofyear
av_pr_sac_2020['Час отключения'] = av_pr_sac_2020['date'].dt.hour

av_pr_sac_2020

#функция myround для...
def myround(x, base=3):
    return base * round(x/base)

av_pr_sac_2020['Час отключения'] = myround(av_pr_sac_2020['Час отключения'])

av_pr_sac_2020

pog_rf_2020

pog_rf_2020['Час'] = myround(pog_rf_2020['Час'])

pog_rf_2020

av_pr_sac_2020['ident'] = av_pr_sac_2020['region'].astype(str) + ',' + av_pr_sac_2020['День года'].astype(str) + ',' + av_pr_sac_2020['Час отключения'].astype(str)

av_pr_sac_2020

pog_rf_2020['ident'] = pog_rf_2020['region'].astype(str) + ',' + pog_rf_2020['День года'].astype(str) + ',' + pog_rf_2020['Час'].astype(str)

pog_rf_2020

pog_rf_2020['if_acc'] = pog_rf_2020['ident'][~pog_rf_2020['ident'].isin(av_pr_sac_2020['ident'])]
pog_rf_2020['if_acc'] = pog_rf_2020['if_acc'].notna()

pog_rf_2020['if_acc'].describe()

WW_dict = {'Морось незамерзающая непрерывная слабая в срок наблюдения. ' : 'Морось', 'Морось незамерзающая с перерывами слабая в срок наблюдения. ' : 'Морось',
      'Морось незамерзающая непрерывная умеренная в срок наблюдения. ' : 'Морось', 'Морось (незамерзающая) или снежные зерна неливневые. ' : 'Морось',
      'Дымка. ' : 'Дымка', ' ' : 'Без осадков', 'Снег непрерывный умеренный в срок наблюдения. ' : 'Снег', 'Снег неливневый. ' : 'Снег', '  Диаметр отложения мокрого снега составляет 1 мм.' : 'Снег',
      '  Диаметр отложения мокрого снега составляет 2 мм.': 'Снег', 'Снег неливневый.  Диаметр отложения мокрого снега составляет 2 мм.' : 'Снег',
      'Дождь (незамерзающий) неливневый. ' : 'Дождь', 'Снег непрерывный слабый в срок наблюдения. ' : 'Снег', 'Замерзающая морось или замерзающий дождь неливневые. ' : 'Снег',
      'Ливневый снег слабый в срок наблюдения или за последний час. ' : 'Снег', 'Ливневый снег умеренный или сильный в срок наблюдения или за последний час.  Диаметр отложения при гололеде составляет 1 мм.' : 'Снег',
      'Снежные зерна (с туманом или без него). ' : 'Снег', 'Дождь незамерзающий непрерывный слабый в срок наблюдения. ' : 'Дождь', 'Снег с перерывами слабый в срок наблюдения. ' : 'Снег',
      'Дождь незамерзающий с перерывами слабый в срок наблюдения. ' : 'Дождь', 'Ливневый снег умеренный или сильный в срок наблюдения или за последний час. ' : 'Снег',
      'Облака в целом образовывались или развивались. ' : 'Без осадков', 'Облака в целом рассеиваются или становятся менее развитыми. ' : 'Без осадков',
      'Ливневый(ые) дождь(и) со снегом слабый(ые) в срок наблюдения или за последний час. ' : 'Дождь', 'Ливневый(ые) дождь(и) со снегом умеренный(ые) или сильный(ые) в срок наблюдения или за последний час. ' : 'Дождь',
      'Ливневый(ые) дождь(и) слабый(ые) в срок наблюдения или за последний час. ' : 'Дождь', 'Дождь или морось со снегом умеренные или сильные. ' : 'Дождь', 
      'Морось и дождь умеренные или сильные. ' : 'Дождь', 'Туман или ледяной туман, неба не видно, без заметного изменения интенсивности в течение последнего часа. ' : 'Туман', 
      'Ливневый(ые) дождь(и). ' : 'Дождь', 'Дождь незамерзающий непрерывный умеренный в срок наблюдения. ' : 'Дождь', 
      'Ливневый(ые) дождь(и) умеренный(ые) или сильный(ые) в срок наблюдения или за последний час. ' : 'Дождь', 'Дождь незамерзающий непрерывный сильный в срок наблюдения. ' : 'Дождь',
      'Дождь незамерзающий с перерывами сильный в срок наблюдения. ' : 'Дождь', 'Гроза слабая или умеренная без града, но с дождем и/или снегом в срок наблюдения. ' : 'Гроза',
      'Гроза, но без осадков, в срок наблюдения. ' : 'Гроза', 'Умеренный или сильный дождь в срок наблюдения. Гроза в течение последнего часа, но не в срок наблюдения. ' : 'Дождь',
      'Туман или ледяной туман, неба не видно, начался или усилился в течение последнего часа. ' : 'Туман', 'Ливневая снежная крупа или небольшой град с дождем или без него, или дождь со снегом слабые в срок наблюдения или за последний час. ' : 'Град',
      'Ливневый град, или дождь и град. ' : 'Град', 'Дождь незамерзающий с перерывами умеренный в срок наблюдения. ' : 'Дождь', 'Ливневый снег или ливневый дождь и снег. ' : 'Снег',
      'Дождь или морось со снегом слабые. ' : 'Дождь', 'Дождь со снегом или ледяная крупа неливневые. ' : 'Снег', 'Снег непрерывный сильный в срок наблюдения. ' : 'Снег',
      'Снег с перерывами сильный в срок наблюдения. ' : 'Снег'}

pog_rf_2020.loc[:,'common'] = pog_rf_2020.loc[:,'common'].map(WW_dict)

pog_rf_2020['temp'].fillna(pog_rf_2020['temp'].mean(), inplace = True)
pog_rf_2020['wind_speed'].fillna(pog_rf_2020['wind_speed'].mean(), inplace = True)
pog_rf_2020['common'].fillna(value={'common': 'Без осадков'}, inplace = True)

# X - предикторы (удаляем все лишнее), y - предсказываемая независимая переменная (ворует/не ворует)
X = pog_rf_2020[['temp','wind_speed','common']]
y = pog_rf_2020.if_acc

X = pd.get_dummies(X)

import sklearn  #перенести на верх
from sklearn.model_selection import train_test_split  #перенести наверх
X_train, X_test, y_train, y_test = train_test_split(X, y) 

from sklearn import tree  #перенести на верх
from sklearn.model_selection import GridSearchCV  #перенести наверх
clf = tree.DecisionTreeClassifier()

parameters = {'max_depth':range(1,5), 'min_samples_split':range(2,5), 'min_samples_leaf':range(1,5)}
search = GridSearchCV(clf, parameters, cv = 5)
search.fit(X_train,y_train)
best_tree = search.best_estimator_
print('Параметры лучшего дерева', search.best_params_)
print('Точность лучшего дерева на train set:', best_tree.score(X_train, y_train))
print('Точность лучшего дерева на test set:', best_tree.score(X_test, y_test))

predict=best_tree.predict(X_test)

predict

import numpy as np #перенести на верх
np.unique(predict)

probs = best_tree.predict_proba(X_test)

probs

np.unique(probs)
